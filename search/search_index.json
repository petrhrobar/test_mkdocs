{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"A/","text":"3d Pipeline","title":"3d Pipeline"},{"location":"A/#3d-pipeline","text":"","title":"3d Pipeline"},{"location":"code/","text":"IOndex This is index markdown file Reference","title":"Home"},{"location":"code/#iondex","text":"This is index markdown file","title":"IOndex"},{"location":"code/#reference","text":"","title":"Reference"},{"location":"code/Segmentation/","text":"Segmentation Modules SSS Segmentation modules consists of five functions prep_dataframe ( dataf ) Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Parameters data : ndarray (structured or homogeneous) , Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. index : Index or array-like Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. columns : Index or array-like Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. dtype : dtype, default None Data type to force. Only a single dtype is allowed. If None, infer. copy : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like copy=True . For DataFrame or 2d ndarray input, the default of None behaves like copy=False . .. versionchanged:: 1.3.0 Examples # Constructing DataFrame from a dictionary. >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64 . Source code in src/code.py def prep_dataframe ( dataf : pd . DataFrame ) -> pd . DataFrame : \"\"\" Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Parameters ---------- **data** : *ndarray (structured or homogeneous)*, Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. **index** : *Index or array-like* Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. **columns** : *Index or array-like* Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. **dtype** : *dtype, default None* Data type to force. Only a single dtype is allowed. If None, infer. **copy** : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like ``copy=True``. For DataFrame or 2d ndarray input, the default of None behaves like ``copy=False``. .. versionchanged:: 1.3.0 Examples -------- ```python # Constructing DataFrame from a dictionary. >>> d = {'col1': [1, 2], 'col2': [3, 4]} >>> df = pd.DataFrame(data=d) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64. ``` \"\"\" return dataf . assign ( A = lambda d : d [ \"i\" ] - 10 ) prep_dataframe222222 ( dataf ) Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Parameters: Name Type Description Default data ndarray (structured or homogeneous) , Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. required index Index or array-like Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. required columns Index or array-like Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. required dtype dtype, default None Data type to force. Only a single dtype is allowed. If None, infer. required copy bool or None, default None Copy data from inputs. For dict data, the default of None behaves like copy=True . For DataFrame or 2d ndarray input, the default of None behaves like copy=False . .. versionchanged:: 1.3.0 required Examples # Constructing DataFrame from a dictionary. >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64 . Source code in src/code.py def prep_dataframe222222 ( dataf : pd . DataFrame ) -> pd . DataFrame : \"\"\" Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Args: data : *ndarray (structured or homogeneous)*, Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. index : *Index or array-like* Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. columns : *Index or array-like* Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. dtype : *dtype, default None* Data type to force. Only a single dtype is allowed. If None, infer. copy : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like ``copy=True``. For DataFrame or 2d ndarray input, the default of None behaves like ``copy=False``. .. versionchanged:: 1.3.0 Examples -------- ```python # Constructing DataFrame from a dictionary. >>> d = {'col1': [1, 2], 'col2': [3, 4]} >>> df = pd.DataFrame(data=d) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64. ``` \"\"\" return dataf . assign ( A = lambda d : d [ \"i\" ] - 10 ) say_hello ( name , age ) Returns a JobTask object (has to exist on UP42). Parameters: Name Type Description Default jobtask_id The UP42 jobtask_id required job_id The UP42 job_id required Source code in src/code.py def say_hello ( name : str , age : int ) -> str : \"\"\" Returns a JobTask object (has to exist on UP42). Args: jobtask_id: The UP42 jobtask_id job_id: The UP42 job_id \"\"\" A = f \"Hello { name } who is { age } yeasr old.\" return A","title":"Segmentation"},{"location":"code/Segmentation/#segmentation-modules","text":"","title":"Segmentation Modules"},{"location":"code/Segmentation/#sss","text":"Segmentation modules consists of five functions","title":"SSS"},{"location":"code/Segmentation/#src.code.prep_dataframe","text":"Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure.","title":"prep_dataframe()"},{"location":"code/Segmentation/#src.code.prep_dataframe--parameters","text":"data : ndarray (structured or homogeneous) , Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. index : Index or array-like Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. columns : Index or array-like Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. dtype : dtype, default None Data type to force. Only a single dtype is allowed. If None, infer. copy : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like copy=True . For DataFrame or 2d ndarray input, the default of None behaves like copy=False . .. versionchanged:: 1.3.0","title":"Parameters"},{"location":"code/Segmentation/#src.code.prep_dataframe--examples","text":"# Constructing DataFrame from a dictionary. >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64 . Source code in src/code.py def prep_dataframe ( dataf : pd . DataFrame ) -> pd . DataFrame : \"\"\" Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Parameters ---------- **data** : *ndarray (structured or homogeneous)*, Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. **index** : *Index or array-like* Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. **columns** : *Index or array-like* Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. **dtype** : *dtype, default None* Data type to force. Only a single dtype is allowed. If None, infer. **copy** : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like ``copy=True``. For DataFrame or 2d ndarray input, the default of None behaves like ``copy=False``. .. versionchanged:: 1.3.0 Examples -------- ```python # Constructing DataFrame from a dictionary. >>> d = {'col1': [1, 2], 'col2': [3, 4]} >>> df = pd.DataFrame(data=d) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64. ``` \"\"\" return dataf . assign ( A = lambda d : d [ \"i\" ] - 10 )","title":"Examples"},{"location":"code/Segmentation/#src.code.prep_dataframe222222","text":"Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Parameters: Name Type Description Default data ndarray (structured or homogeneous) , Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. required index Index or array-like Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. required columns Index or array-like Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. required dtype dtype, default None Data type to force. Only a single dtype is allowed. If None, infer. required copy bool or None, default None Copy data from inputs. For dict data, the default of None behaves like copy=True . For DataFrame or 2d ndarray input, the default of None behaves like copy=False . .. versionchanged:: 1.3.0 required","title":"prep_dataframe222222()"},{"location":"code/Segmentation/#src.code.prep_dataframe222222--examples","text":"# Constructing DataFrame from a dictionary. >>> d = { 'col1' : [ 1 , 2 ], 'col2' : [ 3 , 4 ]} >>> df = pd . DataFrame ( data = d ) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64 . Source code in src/code.py def prep_dataframe222222 ( dataf : pd . DataFrame ) -> pd . DataFrame : \"\"\" Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure. Args: data : *ndarray (structured or homogeneous)*, Iterable, dict, or DataFrame Dict can contain Series, arrays, constants, dataclass or list-like objects. If data is a dict, column order follows insertion-order. If a dict contains Series which have an index defined, it is aligned by its index. .. versionchanged:: 0.25.0 If data is a list of dicts, column order follows insertion-order. index : *Index or array-like* Index to use for resulting frame. Will default to RangeIndex if no indexing information part of input data and no index provided. columns : *Index or array-like* Column labels to use for resulting frame when data does not have them, defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels, will perform column selection instead. dtype : *dtype, default None* Data type to force. Only a single dtype is allowed. If None, infer. copy : bool or None, default None Copy data from inputs. For dict data, the default of None behaves like ``copy=True``. For DataFrame or 2d ndarray input, the default of None behaves like ``copy=False``. .. versionchanged:: 1.3.0 Examples -------- ```python # Constructing DataFrame from a dictionary. >>> d = {'col1': [1, 2], 'col2': [3, 4]} >>> df = pd.DataFrame(data=d) >>> df col1 col2 0 1 3 1 2 4 Notice that the inferred dtype is int64. ``` \"\"\" return dataf . assign ( A = lambda d : d [ \"i\" ] - 10 )","title":"Examples"},{"location":"code/Segmentation/#src.code.say_hello","text":"Returns a JobTask object (has to exist on UP42). Parameters: Name Type Description Default jobtask_id The UP42 jobtask_id required job_id The UP42 job_id required Source code in src/code.py def say_hello ( name : str , age : int ) -> str : \"\"\" Returns a JobTask object (has to exist on UP42). Args: jobtask_id: The UP42 jobtask_id job_id: The UP42 job_id \"\"\" A = f \"Hello { name } who is { age } yeasr old.\" return A","title":"say_hello()"},{"location":"code/backend/","text":"Backend We need backend file and folder for i in range ( 20 ): print ( i ) import padnas as pd sns . load_datasets ()","title":"Backend"},{"location":"code/backend/#backend","text":"We need backend file and folder for i in range ( 20 ): print ( i ) import padnas as pd sns . load_datasets ()","title":"Backend"}]}